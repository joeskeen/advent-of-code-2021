📜 🔤../emojicode/common.emojic🔤

🐇 🆎 🍇
  📗 Returns the valid test case names for this puzzle 📗
  🐇 ❓🧪 ➡️ 🍨🐚🔡🍆 🍇
      ↩️ 🍿 🔤00🔤 🍆
  🍉

  📗 Returns the solution for part A of the puzzle 📗
  💭 Incorrect answers: 
  💭 6939 (too high)
  💭 6642 (too low)
  🐇 ❓🅰️ input🍨🐚🔡🍆 ➡️ 🔡 🍇
    💭 parse the input into a collection of line objects
    🐰input 🍇 line🔡 ➡️ ↔️
      🔫line 🔤 -> 🔤❗ ➡️ halves
      🐰halves 🍇 coord🔡 ➡️ 🎯
        🔫coord 🔤,🔤❗ ➡️ nums
        ↩️ 🆕🎯 🍺💯🐽nums 0❗❗ 🍺💯🐽nums 1❗❗❗
      🍉❗ ➡️ points
      ↩️ 🆕↔️ 🐽points 0❗ 🐽points 1❗ ❗
    🍉❗ ➡️ 🖍️🆕lines
    🐭lines 🍇line ↔️ ➡️ 👌
      ↩️ ↔️line❓ 👐 ↕️line❓
    🍉❗ ➡️ 🖍️lines

    🆕🍨🐚🎯🍆❗ ➡️ 🖍️🆕intersectionPoints
    🔂 i 🆕⏩0 📏lines❓ 1❗ 🍇
      🔂 j 🆕⏩🤜i ➕ 1🤛 📏lines❓ 1❗ 🍇
        💭 add all overlap points to the intersectionPoints
        🐥intersectionPoints ⏬🐇🆎 🐽lines i❗ 🐽lines j❗❓❗
        💭 add intersect point (if it exists)
        🔀🐇🆎 🐽lines i❗ 🐽lines j❗❓ ➡️ intersectPoint
        ↪️ ❎intersectPoint 🙌 🤷❗ 🍇
          🐻intersectionPoints 🍺intersectPoint❗
        🍉
      🍉
    🍉

    💭 de-duplicate intersectionPoints using 🦄
    🦄🐇🆎 intersectionPoints ❗ ➡️ uniquePoints

    ↩️ 🔡📏uniquePoints❓❗
  🍉

  📗 returns only the unique elements from the provided collection 📗
  🐇 ❗🦄 collection 🍨🐚🎯🍆 ➡️ 🍨🐚🎯🍆 🍇
    collection ➡️ 🖍️🆕items

    💭 starting at the beginning of the list for each index i 
    🔂 i 🆕⏩ 0 📏items❓ 1❗ 🍇
      💭 starting at the end of the list for each index j
      🔂 j 🆕⏩🤜📏items❓ ➖ 1🤛 i -1❗ 🍇
        💭 if the items at index i and j are the same
        ↪️ 🐽items i❗ 🙌 🐽items j❗ 🍇
          💭 remove the item at index j
          🐨items j❗
        🍉
      🍉
    🍉

    ↩️ items
  🍉

  📗 Returns the (single) point where two lines intersect or 🤷 if they don't touch or have same slope 📗
  🐇 ❓🔀 line1↔️ line2↔️ ➡️ 🍬🎯 🍇
    💭 line1 represented as a1x + b1y = c1
    🚦🔚line1❓❓ ➖ 🚦🔜line1❓❓ ➡️ a1
    🚥🔜line1❓❓ ➖ 🚥🔚line1❓❓ ➡️ b1
    🤜a1 ✖️ 🚥🔜line1❓❓🤛 ➕ 🤜b1 ✖️ 🚦🔜line1❓❓🤛 ➡️ c1
    
    💭 line2 represented as a2x + b2y = c2
    🚦🔚line2❓❓ ➖ 🚦🔜line2❓❓ ➡️ a2
    🚥🔜line2❓❓ ➖ 🚥🔚line2❓❓ ➡️ b2
    🤜a2 ✖️ 🚥🔜line2❓❓🤛 ➕ 🤜b2 ✖️ 🚦🔜line2❓❓🤛 ➡️ c2

    🤜a1 ✖️ b2🤛 ➖ 🤜a2 ✖️ b1🤛 ➡️ determinant

    ↪️ determinant 🙌 0 🍇
      ↩️ 🤷
    🍉

    🤜🤜b2 ✖️ c1🤛 ➖ 🤜b1 ✖️ c2🤛🤛 ➗ determinant ➡️ intersectX
    🤜🤜a1 ✖️ c2🤛 ➖ 🤜a2 ✖️ c1🤛🤛 ➗ determinant ➡️ intersectY

    🤜intersectX ▶️🙌 🚥🔜line1❓❓🤛 🤝 🤜intersectX ◀️🙌 🚥🔚line1❓❓🤛 👐
    🤜intersectX ◀️🙌 🚥🔜line1❓❓🤛 🤝 🤜intersectX ▶️🙌 🚥🔚line1❓❓🤛 ➡️ intersectXOnLine1Segment
    🤜intersectX ▶️🙌 🚥🔜line2❓❓🤛 🤝 🤜intersectX ◀️🙌 🚥🔚line2❓❓🤛 👐
    🤜intersectX ◀️🙌 🚥🔜line2❓❓🤛 🤝 🤜intersectX ▶️🙌 🚥🔚line2❓❓🤛 ➡️ intersectXOnLine2Segment
    🤜intersectY ▶️🙌 🚦🔜line1❓❓🤛 🤝 🤜intersectY ◀️🙌 🚦🔚line1❓❓🤛 👐
    🤜intersectY ◀️🙌 🚦🔜line1❓❓🤛 🤝 🤜intersectY ▶️🙌 🚦🔚line1❓❓🤛 ➡️ intersectYOnLine1Segment
    🤜intersectY ▶️🙌 🚦🔜line2❓❓🤛 🤝 🤜intersectY ◀️🙌 🚦🔚line2❓❓🤛 👐
    🤜intersectY ◀️🙌 🚦🔜line2❓❓🤛 🤝 🤜intersectY ▶️🙌 🚦🔚line2❓❓🤛 ➡️ intersectYOnLine2Segment

    ↪️ intersectXOnLine1Segment 🤝 intersectXOnLine2Segment 🤝 intersectYOnLine1Segment 🤝 intersectYOnLine2Segment 🍇
      ↩️ 🆕🎯 intersectX intersectY ❗
    🍉

    ↩️ 🤷
  🍉

  📗 If the lines are both horizontal or vertical, return each (integer) point at which they overlap, if any 📗
  🐇 ❓⏬  line1↔️ line2↔️ ➡️ 🍨🐚🎯🍆 🍇
    💭 if the two lines are the same axis
    💭 and are aligned such that they could overlap
    💭 the overlap range is going to be defined by the 
    💭 start/end point of one of the lines and the start/end point of one of the lines
    💭 so we'll put those 4 points (start and end points)
    💭 into a list, sort it, and then grab the middle two points
    🆕🍨🐚🎯🍆❗ ➡️ 🖍️🆕intersectionPoints
    🆕🍨🐚🎯🍆❗ ➡️ 🖍️🆕points
    💭 add all end points for both lines
    🐻points 🔜line1❓❗
    🐻points 🔚line1❓❗
    🐻points 🔜line2❓❗
    🐻points 🔚line2❓❗
    💭 sort the points
    🦁points 🍇 p1🎯 p2🎯 ➡️ 🔢
      💭 compare the points first by x then by y
      ↩️ ↔️p1 p2❓
    🍉❗
    💭 there are 4 points, indexes 1 and 2 are the middle ones
    🐽points 1❗ ➡️ overlapStart
    🐽points 2❗ ➡️ overlapEnd

    💭 if both lines are vertical and their x coordinates are the same
    ↪️ ↕️line1❓ 🤝 ↕️line2❓ 🤝 🤜 🚥🔜line1❓❓ 🙌 🚥🔜line2❓❓ 🤛 🍇
      🚦🔜line1❓❓ ➡️ line1StartY
      🚦🔚line1❓❓ ➡️ line1EndY
      🚦🔜line2❓❓ ➡️ line2StartY
      🚦🔚line2❓❓ ➡️ line2EndY

      💭 is line1StartY on line2 or line1EndY on line2?
      ↪️ 🤜 line1StartY ▶️🙌 line2StartY 🤝 line1StartY ◀️🙌 line2EndY 🤛 👐
            🤜 line1StartY ▶️🙌 line2EndY 🤝 line1StartY ◀️🙌 line2StartY 🤛 👐 
            🤜 line1EndY ▶️🙌 line2StartY 🤝 line1EndY ◀️🙌 line2EndY 🤛 👐
            🤜 line1EndY ▶️🙌 line2EndY 🤝 line1EndY ◀️🙌 line2StartY 🤛 🍇
          🔂 i 🆕⏩🔢🚦overlapStart❓❗ 🔢🚦overlapEnd❓ ➕ 1❗ 1❗ 🍇
            🐻intersectionPoints 🆕🎯🚥overlapStart❓ 💯i❗❗❗
          🍉
      🍉
    🍉
    💭 else if both lines are horizontal and their y coordinates are the same
    🙅↪️ ↔️line1❓ 🤝 ↔️line2❓ 🤝 🤜 🚦🔜line1❓❓ 🙌 🚦🔜line2❓❓ 🤛 🍇
      🚥🔜line1❓❓ ➡️ line1StartX
      🚥🔚line1❓❓ ➡️ line1EndX
      🚥🔜line2❓❓ ➡️ line2StartX
      🚥🔚line2❓❓ ➡️ line2EndX

      💭 is line1StartX on line2 or line1EndX on line2?
      ↪️ 🤜 line1StartX ▶️🙌 line2StartX 🤝 line1StartX ◀️🙌 line2EndX 🤛 👐
            🤜 line1StartX ▶️🙌 line2EndX 🤝 line1StartX ◀️🙌 line2StartX 🤛 👐 
            🤜 line1EndX ▶️🙌 line2StartX 🤝 line1EndX ◀️🙌 line2EndX 🤛 👐
            🤜 line1EndX ▶️🙌 line2EndX 🤝 line1EndX ◀️🙌 line2StartX 🤛 🍇
          🔂 i 🆕⏩🔢🚥overlapStart❓❗ 🔢🚥overlapEnd❓ ➕ 1❗ 1❗ 🍇
            🐻intersectionPoints 🆕🎯🚦overlapStart❓ 💯i❗❗❗
          🍉
      🍉
    🍉

    ↩️ intersectionPoints
  🍉
  
  📗 Returns the solution for part B of the puzzle 📗
  🐇 ❓🅱️ input🍨🐚🔡🍆 ➡️ 🔡 🍇
    ↩️ 🔤🤦 Oops, we haven't implemented this yet...🔤
  🍉

🍉

📗 Line segment struct 📗
🕊️ ↔️ 🍇
  🖍️🆕start🎯
  🖍️🆕end🎯

  📗 Constructs a line segment with given start and end points 📗
  🆕 🍼start🎯 🍼end🎯 🍇🍉

  📗 Returns the start point of this line segment 📗
  ❓🔜 ➡️ 🎯 🍇 ↩️ start 🍉

  📗 Returns the end point of this line segment 📗
  ❓🔚 ➡️ 🎯 🍇 ↩️ end 🍉

  📗 Returns whether this is a horizontal line 📗
  ❓↔️ ➡️ 👌 🍇 ↩️ 🚦start❓ 🙌 🚦end❓ 🍉

  📗 Returns whether this is a vertical line 📗
  ❓↕️ ➡️ 👌 🍇 ↩️ 🚥start❓ 🙌 🚥end❓ 🍉

  📗 Returns a string representaiton of this line segment in the format start -> end 📗
  ❗🔡 ➡️ 🔡 🍇 ↩️ 🔤🧲🔡start❗🧲 -> 🧲🔡end❗🧲🔤 🍉
🍉

📗 Point struct 📗
🕊️ 🎯 🍇
    🖍️🆕x 💯
    🖍️🆕y 💯

    📗 Constructs a Point with specified X and Y coordinates 📗
    🆕 🍼x💯 🍼y💯 🍇🍉

    📗 Returns the X coordinate of the point 📗
    ❓🚥➡️💯 🍇 ↩️x 🍉
    📗 Returns the Y coordinate of the point 📗
    ❓🚦➡️💯 🍇 ↩️y 🍉

    📗 Returns the point in the format X,Y 📗
    ❗🔡 ➡️ 🔡 🍇 ↩️ 🔤🧲🔡x❗🧲,🧲🔡y❗🧲🔤 🍉

    📗 Returns whether this point and another point are equal, that is, have the same X and Y coordinates 📗
    🙌 other 🎯 ➡️ 👌 🍇 ↩️ x 🙌 🚥other❓ 🤝 y 🙌 🚦other❓ 🍉

    📗 Compares this point to another point, returning -1, 0, or 1 (for sorting) 📗
    ❓↔️ other🎯 ➡️ 🔢 🍇
        ↪️ x ◀️ 🚥other❓ 🍇
            ↩️ -1
        🍉
        ↪️ x ▶️ 🚥other❓ 🍇
            ↩️ 1
        🍉
        ↪️ y ◀️ 🚦other❓ 🍇
            ↩️ -1
        🍉
        ↪️ y ▶️ 🚦other❓ 🍇
            ↩️ 1
        🍉
        ↩️ 0
    🍉
🍉
